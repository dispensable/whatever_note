import tornado.ioloop
import tornado.web
from Back_end.app.model.user_data import registe, generate_auth_token, verify_auth_token, verify_password, get_username
import json
import time

SECRET_KEY = "TESTFORSECRETAUTH" #TODO: replace this with a random key move to config file


class BasicHandler(tornado.web.RequestHandler):
    """覆盖一些基本方法"""

    def get_current_user(self):
        """覆盖获取当前用户的方法,使用请求首部中的token实现用户验证"""
        token = self.request.headers["Access-token"]
        if verify_auth_token(SECRET_KEY, token):
            pay_load = verify_auth_token(SECRET_KEY, token)
            return pay_load['username']
        else:
            return None

    def prepare(self):
        """自动处理json类型"""
        try:
            if self.request.headers["Content-Type"].startswith("application/json"):
                self.json_args = json.loads(self.request.body.decode(encoding='UTF-8'))
            else:
                self.json_args = None
        except KeyError as e:
            print("can't find key.")


class MainHandler(BasicHandler):
    """ handler for / """
    def get(self, *args, **kwargs):
        if self.current_user:
            self.write('Hello' + self.current_user)
        else:
            self.write('<h1>Hello Stranger!</h1>')


class LoginHandler(BasicHandler):
    """ handler for /registe """
    def post(self, *args, **kwargs):
        print("Get data from angular: {0}".format(self.request))
        print("Request body: {0}".format(self.request.body))
        singup = registe(self.request.body.decode(encoding='UTF-8'))
        if singup:
            self.write(singup)
        else:
            self.write_error(403)


class ApiAuthHandler(BasicHandler):
    """ handler for /api_1_0/token """
    def post(self, *args, **kwargs):
        login_data = self.json_args

        email = login_data['email']
        password = login_data['password']

        if verify_password(email, password):
            token = generate_auth_token(SECRET_KEY, int(time.time()) + 3600, get_username(email))
            self.write({"expiration": 3600, "token": token.decode()})
        else:
            self.write_error(403)


def make_app():
    return tornado.web.Application([
        (r'/', MainHandler),
        (r'/api/user_qualification', LoginHandler),
        (r'/api/token', ApiAuthHandler)
    ])


if __name__ == "__main__":
    app = make_app()
    app.listen(8888)
    tornado.ioloop.IOLoop.current().start()