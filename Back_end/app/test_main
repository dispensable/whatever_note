import json
import time

import tornado.ioloop
import tornado.web

# user handle
from celery_mq.tasks import auth_mail_task
from Back_end.app.model.user_data import registe, generate_auth_token, \
    verify_auth_token, verify_password, get_username_by_email, is_name_exist,\
    confirm_user, has_confirmed, is_email_exist

# posts handle
from model import user_post

# comments handle
from model import post_comments

SECRET_KEY = "TESTFORSECRETAUTH" #TODO: replace this with a random key move to config file
EMAIL_SECRET_KEY = "EMAILSECRETKEY"
WEBSITE_ADDR = 'http://localhost:8888/api/confirm_token/'


class BasicHandler(tornado.web.RequestHandler):
    """覆盖一些基本方法"""

    def get_current_user(self):
        """覆盖获取当前用户的方法,使用请求首部中的token实现用户验证"""
        token = self.request.headers["Access-token"]
        if verify_auth_token(SECRET_KEY, token):
            pay_load = verify_auth_token(SECRET_KEY, token)
            return pay_load['username']
        else:
            return None

    def prepare(self):
        """自动处理json类型"""
        try:
            if self.request.headers["Content-Type"].startswith("application/json"):
                self.json_args = json.loads(self.request.body.decode(encoding='UTF-8'))
            else:
                self.json_args = None
        except KeyError as e:
            print("can't find key.")
            print(e)


class MainHandler(BasicHandler):
    """ handler for / """
    def get(self, *args, **kwargs):
        if self.current_user:
            self.write('Hello' + self.current_user)
        else:
            self.write('<h1>Hello Stranger!</h1>')


class SingUpHandler(BasicHandler):
    """ handler for /api/user_qualification """
    def post(self, *args, **kwargs):
        print("Get data from angular: {0}".format(self.request))
        print("Request body: {0}".format(self.request.body))
        singup = registe(self.request.body.decode(encoding='UTF-8'))
        if singup:
            # 发送确认邮件
            username = singup['username']
            email = singup['email']
            # 生成确认链接
            token = generate_auth_token(EMAIL_SECRET_KEY, int(time.time()) + 36000, username)
            active_link = WEBSITE_ADDR + token.decode()
            print("ready to add tasks to celery.")
            # 添加到邮件发送队列
            auth_mail_task.delay(username, active_link, email)
            # 讲用户名和邮件地址发送到客户端
            self.write(singup)
        else:
            self.set_status(500, 'Sing up failed T_T')


class ApiAuthHandler(BasicHandler):
    """ handler for /api/token """
    def post(self, *args, **kwargs):
        login_data = self.json_args

        print("Request body: {0}".format(self.request.body))
        email = login_data['email']
        password = login_data['password']

        if verify_password(email, password):
            expiration = int(time.time() + 3600)
            token = generate_auth_token(SECRET_KEY, expiration,
                                        get_username_by_email(email), confirmed=has_confirmed(email))
            self.write({"expiration": expiration, "token": token.decode()})
        else:
            self.set_status(403, reason="login failed, please check your password or email.")


class NameEmailUniqueHandler(BasicHandler):
    """ 检查用户名唯一性 """
    def get(self):
        try:
            name = self.get_argument('name')
            email = None
        except Exception:
            email = self.get_argument('email')
            name = None

        if name is not None:
            self.write({'nameUnique': not is_name_exist(name), 'emailUnique': None})
        elif email is not None:
            self.write({'nameUnique': None, 'emailUnique': not is_email_exist(email)})
        else:
            self.set_status(403, 'Unknow argument.')
        print("Check name: {0}".format(name if name is not None else email))


class ConfirmTokenHandler(BasicHandler):
    """ 发送确认邮件 """
    def get(self, token):
        """ 从邮箱确认用户账户 """
        payload = verify_auth_token(EMAIL_SECRET_KEY, token)
        # 正常验证,可以确认
        if payload:
            confirm_user(payload['username'])
            self.write("<h1>Confirm successed!</h1> <h2>redirecting to sing in page ....</h2>")
            self.redirect(self.get_login_url())
        # 无法验证token
        else:
            self.write("Confirm failed.")
            self.set_status(403, "Can't confirm your link. The link is wrong or expired.")

    def post(self, *args, **kwargs):
        """ 重新发送确认邮件 """
        resend_info = self.json_args
        print(resend_info)
        if not has_confirmed(resend_info['email']):
            token = generate_auth_token(EMAIL_SECRET_KEY, int(time.time()) + 36000, resend_info['username'])
            active_link = WEBSITE_ADDR + token.decode()
            auth_mail_task.delay(resend_info['username'], active_link, resend_info['email'])
            self.write('Your confirm email has been sent, check your inbox or trash box to confirm.')
        else:
            self.set_status(403, 'You account has been confirmed.')
            self.redirect(self.get_login_url())


class PostsHandler(BasicHandler):
    def get(self, *args, **kwargs):
        page = self.get_argument('page')
        max_per_page = self.get_argument('perpage')
        if page >= 0 and max_per_page >= 0:
            self.write(user_post.get_posts_collection((page - 1) * max_per_page, max_per_page))
        else:
            self.set_status(400, 'Wrong argument, page and max_per_page must be positive.')

    def post(self, *args, **kwargs):
        post_json = self.json_args
        post = user_post.create_post(post_json['post_by'], post_json['content'])

        if post:
            post['post_id'] = post['_id']._ObjectId__id.hex()

            del post['_id']
            del post['who_comments']
            del post['comment_ids']

            self.set_header('Location', self.reverse_url(SinglePostHandler) + post['post_id'])
            self.set_status(201, 'Create success!')
            self.write(post)
        else:
            self.set_status(500, 'Create failed.')


class SinglePostHandler(BasicHandler):
    def get(self, post_id):
        post = user_post.get_post(post_id)
        if post:
            del post['_id']
            del post['who_comments']
            del post['comment_ids']
            self.write(post)
        else:
            self.set_status(404)

    def put(self, post_id):
        new = self.json_args
        user_post.edit_post(post_id, new['content'])


class CommentsHandler(BasicHandler):
    def get(self, post_id):
        comments = post_comments.get_comments_by_post_id(post_id)
        if comments:
            self.write(comments)
        else:
            self.set_status(404, "comments not found, may be there is no comments or network broken.")

    def post(self, post_id):
        comment = self.json_args
        post_comments.create_comment(comment['content'], comment['post_by'], post_id)


class UserHandler(BasicHandler):
    def get(self, *args, **kwargs):
        pass


class UserPostsHandler(BasicHandler):
    def get(self, *args, **kwargs):
        pass


def make_app():
    return tornado.web.Application([
        (r'/', MainHandler),
        (r'/api/user_qualification', SingUpHandler),
        (r'/api/token', ApiAuthHandler),
        (r'/api/name$|/api/email', NameEmailUniqueHandler),
        (r'/api/confirm_token/(.*)', ConfirmTokenHandler),
        (r'/api/posts/', PostsHandler),
        (r'/api/posts/([abcdef0123456789]*)', SinglePostHandler),
        (r'/api/posts/([abcdef0123456789]*)/comments', CommentsHandler),
        (r'/api/users/([abcdef0123456789]*)', UserHandler),
        (r'/api/users/([abcdef0123456789]*)/posts', UserPostsHandler)
    ], login_url='http://localhost:4200/singin')


if __name__ == "__main__":
    app = make_app()
    app.listen(8888)
    tornado.ioloop.IOLoop.current().start()